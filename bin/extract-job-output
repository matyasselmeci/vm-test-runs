#!/usr/bin/python

import errno
import guestfs
import os
import sys

blacklist = set(['/lost+found'])

def print_now(message):
    print message,
    sys.stdout.flush()

g = guestfs.GuestFS()

# add careful checking of argv
image_filename = sys.argv[1]
output_dir = sys.argv[2]

if os.path.getsize(image_filename) == 0:
    os.remove(image_filename)
    sys.exit("Empty result image '%s'" % image_filename)

try:
    os.makedirs(output_dir)
except OSError, exc:
    if exc.errno == errno.EEXIST:
        sys.exit("Output directory '%s' already exists, will not overwrite, try again" % output_dir)
    raise

g.add_drive_opts(image_filename, readonly=1)

print_now("Extracting files from '%s'..." % (image_filename))
g.launch()

filesystems = g.list_filesystems()
if len(filesystems) != 1:
    print 'Found %d filesystems, unable to continue' % len(filesystems)
    sys.exit(2)

g.mount(filesystems[0][0], '/')
stat = g.statvfs('/')

# Write IO image free space to a file, expecting the bsize to be 1024, or 1M
free_space = format(float(stat['bavail'])/stat['bsize'], '.1f') + 'M'
f = open(output_dir + '/io_free_size', 'w')
f.write(free_space)
f.close()

paths = g.find('/')
for image_path in paths:
    full_image_path = os.path.join('/', image_path)
    # print "Processing '%s'..." % (full_image_path)
    # if full_image_path in blacklist:
        # print "  - skipping"

    if not g.is_dir(full_image_path):
        image_dir = os.path.dirname(image_path)
        local_dir = os.path.join(output_dir, image_dir)
        if not os.path.exists(local_dir):
            # print "  - creating directory"
            os.makedirs(local_dir)
            # print "  - extracting"
        g.download(full_image_path, os.path.join(output_dir, image_path))

print "ok"
