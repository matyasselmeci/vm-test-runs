#!/usr/bin/python

import os
import re
import sys
import time
import textwrap

import yaml
import vmu

def start_error():
    sys.stdout.write('\x1b[1;31m')

def start_warn():
    sys.stdout.write('\x1b[1;34m')

def end_color():
    sys.stdout.write('\x1b[0m')

def indent_block(block, indent=4):
    output = ''
    for line in block.rstrip('\n').split('\n'):
        output += (' ' * indent) + line + '\n'
    return output

def process_run(run):
    # mapping osg-test status to column in the report
    test_status = {'pass': 0,
                   'died': 1,
                   'fail': 2,
                   'update': 2,
                   'install': 2,
                   'cleanup': 3,
                   'ignore': 4,
                   'timeout': 5}

    if run['run_status'] != 0:
        if ('osg_test_logfile' not in run) or (run['osg_test_logfile'] is None):
            logfile_text = 'osg-test did not run'
        else:
            logfile_text = run['osg_test_logfile']
        report = 'TEST JOB %s (%s)\n' % (run['job_serial'], logfile_text)
        if ('guest_address' in run) and (run['guest_address'] is not None):
            report += 'Guest IP address: %s\n' % (run['guest_address'])
        report += 'Cause of death: %s\n' % (run['run_summary'])
        if ('run_details' in run) and (run['run_details'] is not None):
            report += indent_block(run['run_details'])
        host = 'Execute host %s (%s)' % (run['host_name'], run['host_address'])
        if host in deaths_by_host:
            deaths_by_host[host].append(report)
        else:
            deaths_by_host[host] = [report]
        return test_status['died']
    else:
        # ' yum_timeout' can be appended to install, update, or timeout failures; ignore it
        simple_test_status = run['osg_test_status'].split()[0]
        return test_status[simple_test_status]

def tally_run_results(container, key, status):
    if key not in container:
        container[key] = [0, 0, 0, 0, 0, 0]
    container[key][status] += 1

def print_tallied_results(container, key_label):
    key_column_width = max(12, len(key_label))
    for key in container.keys():
        if len(key) > key_column_width:
            key_column_width = len(key)

    print '%-*s    OK    DIED   FAIL   CLEAN  IGNORE   TIMEOUT' % (key_column_width, key_label.upper())
    print '%s   ----   ----   ----    ----   ----     ----' % ('-' * key_column_width)
    for key in sorted(container.keys()):
        print '%-*s   %4d   %4d   %4d    %4d   %4d     %4d' % \
            (key_column_width, key, container[key][0], \
             container[key][1], container[key][2], container[key][3], container[key][4], container[key][5])
    print

# ------------------------------------------------------------------------------

# Process command-line arguments
script_name = os.path.basename(sys.argv[0])
if len(sys.argv) != 2:
    print 'usage: %s <VMU OUTPUT DIR>' % (script_name)
    sys.exit(1)
output_directory = sys.argv[1]
if not os.path.exists(output_directory):
    print '%s: VMU output directory "%s" does not exist' % (script_name, output_directory)
    sys.exit(1)

# Load test run data from combined YAML file
combined_yaml_path = os.path.join(output_directory, 'combined-analysis.yaml')
yaml_file = open(combined_yaml_path)
yaml_contents = yaml_file.read()
yaml_file.close()
runs = yaml.load(yaml_contents)
run_params = vmu.load_run_params(vmu.PARAM_DIR)
PACKAGE_MAPPING = vmu.package_mapping(vmu.flatten_run_params(run_params))

# Report on one run at a time
total_jobs = 0
jobs_died = 0
deaths_by_host = {}
results_by_os = {}
results_by_pkg = {}
results_by_src = {}
for run in runs:
    status = process_run(run)
    total_jobs += 1
    if status == 1:
        jobs_died += 1
    tally_run_results(results_by_os, vmu.canonical_os_string(run['os_release'] + run['platform']), status)
    tally_run_results(results_by_pkg, PACKAGE_MAPPING[run['param_packages']], status)
    tally_run_results(results_by_src, vmu.canonical_src_string(run['param_sources']), status)

print_tallied_results(results_by_os, 'OS Release')
print_tallied_results(results_by_pkg, 'Installed')
print_tallied_results(results_by_src, 'Source(s)')

# Print machines that died
if len(deaths_by_host) > 0:
    print >> sys.stderr, '-' * 75
    print >> sys.stderr
    print >> sys.stderr, 'To: CHTC Infrastructure <htcondor-inf@cs.wisc.edu>'
    print >> sys.stderr, 'Subject: VM universe failures for OSG tests on %s' % (time.strftime('%Y-%m-%d'))
    print >> sys.stderr

    paragraph = '''The OSG Software team runs automated tests in VM universe every morning.  The following jobs failed
    today, for the reasons shown below.  The jobs are grouped by hypervisor host.'''
    print >> sys.stderr, textwrap.fill(paragraph, 75)
    print >> sys.stderr

    print >> sys.stderr, 'Run date: %s' % (time.strftime('%d %B %Y (%A)'))
    print >> sys.stderr, 'Failures: %d out of %d (%.0f%%)' % (jobs_died, total_jobs, 100.0 * jobs_died / total_jobs)
    print >> sys.stderr

    for host in sorted(deaths_by_host.keys()):
        print >> sys.stderr, '-' * 75
        print >> sys.stderr, host
        print >> sys.stderr, '-' * 75
        print >> sys.stderr
        print >> sys.stderr, '\n'.join(deaths_by_host[host])
        print >> sys.stderr
